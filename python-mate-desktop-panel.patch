--- python-mate-desktop-1.4.0/mateapplet/appletmodule.c.orig	2012-07-11 19:05:07.000000000 +0200
+++ python-mate-desktop-1.4.0/mateapplet/appletmodule.c	2014-01-13 16:55:49.312213846 +0100
@@ -44,14 +44,6 @@
     PyModule_AddIntConstant (m, "ORIENT_LEFT", MATE_PANEL_APPLET_ORIENT_LEFT);
     PyModule_AddIntConstant (m, "ORIENT_RIGHT", MATE_PANEL_APPLET_ORIENT_RIGHT);
 
-    PyModule_AddIntConstant (m, "SIZE_XX_SMALL", MATE_Vertigo_PANEL_XX_SMALL);
-    PyModule_AddIntConstant (m, "SIZE_X_SMALL", MATE_Vertigo_PANEL_X_SMALL);
-    PyModule_AddIntConstant (m, "SIZE_SMALL", MATE_Vertigo_PANEL_SMALL);
-    PyModule_AddIntConstant (m, "SIZE_MEDIUM", MATE_Vertigo_PANEL_MEDIUM);
-    PyModule_AddIntConstant (m, "SIZE_LARGE", MATE_Vertigo_PANEL_LARGE);
-    PyModule_AddIntConstant (m, "SIZE_X_LARGE", MATE_Vertigo_PANEL_X_LARGE);
-    PyModule_AddIntConstant (m, "SIZE_XX_LARGE", MATE_Vertigo_PANEL_XX_LARGE);
-
     PyModule_AddIntConstant (m, "EXPAND_MAJOR", MATE_PANEL_APPLET_EXPAND_MAJOR);
     PyModule_AddIntConstant (m, "EXPAND_MINOR", MATE_PANEL_APPLET_EXPAND_MINOR);
     PyModule_AddIntConstant (m, "HAS_HANDLE", MATE_PANEL_APPLET_HAS_HANDLE);
--- python-mate-desktop-1.4.0/configure.ac.orig	2014-01-13 16:56:17.322212665 +0100
+++ python-mate-desktop-1.4.0/configure.ac	2014-01-12 21:48:21.931769757 +0100
@@ -155,7 +155,7 @@
 dnl should we build the mate.applet module?
 AC_ARG_BINDING([applet],[YES],[mate.applet])
 if $build_applet; then
-	PKG_CHECK_MODULES(LIBPANELAPPLET, [libmatepanelapplet-2.0 >= libmatepanelapplet_required_version
+	PKG_CHECK_MODULES(LIBPANELAPPLET, [libmatepanelapplet-4.0 >= libmatepanelapplet_required_version
 					   mate-python-2.0 >= mate_python_required_version
                                            libmate-2.0 libmateui-2.0],
 	  build_applet=true,
--- python-mate-desktop-1.4.0/mateapplet/applet.defs.orig	2012-07-11 19:05:07.000000000 +0200
+++ python-mate-desktop-1.4.0/mateapplet/applet.defs	2014-01-13 19:55:31.348427942 +0100
@@ -67,22 +67,6 @@
   )
 )
 
-(define-method get_preferences_key
-  (of-object "MatePanelApplet")
-  (c-name "mate_panel_applet_get_preferences_key")
-  (return-type "gchar*")
-)
-
-(define-method add_preferences
-  (of-object "MatePanelApplet")
-  (c-name "mate_panel_applet_add_preferences")
-  (return-type "none")
-  (parameters
-    '("const-gchar*" "schema_dir")
-    '("GError**" "opt_error")
-  )
-)
-
 (define-method get_applet_flags
   (of-object "MatePanelApplet")
   (c-name "mate_panel_applet_get_flags")
@@ -98,18 +82,6 @@
   )
 )
 
-(define-method get_control
-  (of-object "MatePanelApplet")
-  (c-name "mate_panel_applet_get_control")
-  (return-type "MateComponentControl*")
-)
-
-(define-method get_popup_component
-  (of-object "MatePanelApplet")
-  (c-name "mate_panel_applet_get_popup_component")
-  (return-type "MateComponentUIComponent*")
-)
-
 (define-method request_focus
   (of-object "MatePanelApplet")
   (c-name "mate_panel_applet_request_focus")
@@ -117,30 +89,6 @@
   (parameters
     '("guint32" "timestamp")))
 
-(define-method setup_menu
-  (of-object "MatePanelApplet")
-  (c-name "mate_panel_applet_setup_menu")
-  (return-type "none")
-  (parameters
-    '("const-gchar*" "xml")
-    '("const-MateComponentUIVerb*" "verb_list")
-    '("gpointer" "user_data")
-  )
-)
-
-(define-method setup_menu_from_file
-  (of-object "MatePanelApplet")
-  (c-name "mate_panel_applet_setup_menu_from_file")
-  (return-type "none")
-  (parameters
-    '("const-gchar*" "opt_datadir")
-    '("const-gchar*" "file")
-    '("const-gchar*" "opt_app_name")
-    '("const-MateComponentUIVerb*" "verb_list")
-    '("gpointer" "user_data")
-  )
-)
-
 (define-method set_background_widget
   (of-object "MatePanelApplet")
   (c-name "mate_panel_applet_set_background_widget")
@@ -150,74 +98,3 @@
   )
 )
 
-(define-function factory_main
-  (c-name "mate_panel_applet_factory_main")
-  (return-type "int")
-  (parameters
-    '("const-gchar*" "iid")
-    '("GType" "applet_type")
-    '("MatePanelAppletFactoryCallback" "callback")
-    '("gpointer" "data")
-  )
-)
-
-(define-function factory_main
-  (c-name "mate_panel_applet_factory_main_closure")
-  (return-type "int")
-  (parameters
-    '("const-gchar*" "iid")
-    '("GType" "applet_type")
-    '("GClosure*" "closure")
-  )
-)
-
-(define-function mate_panel_applet_shlib_factory
-  (c-name "mate_panel_applet_shlib_factory")
-  (return-type "MateComponent_Unknown")
-  (parameters
-    '("const-char*" "iid")
-    '("GType" "applet_type")
-    '("PortableServer_POA" "poa")
-    '("gpointer" "impl_ptr")
-    '("MatePanelAppletFactoryCallback" "callback")
-    '("gpointer" "user_data")
-    '("CORBA_Environment*" "ev")
-  )
-)
-
-(define-function mate_panel_applet_shlib_factory_closure
-  (c-name "mate_panel_applet_shlib_factory_closure")
-  (return-type "MateComponent_Unknown")
-  (parameters
-    '("const-char*" "iid")
-    '("GType" "applet_type")
-    '("PortableServer_POA" "poa")
-    '("gpointer" "impl_ptr")
-    '("GClosure*" "closure")
-    '("CORBA_Environment*" "ev")
-  )
-)
-
-(define-function main
-  (c-name "main")
-  (return-type "int")
-  (parameters
-    '("int" "argc")
-    '("char*-argv" "[]")
-  )
-)
-
-(define-function matecomponent_factory
-  (c-name "panel__applet_matecomponent_factory")
-  (return-type "none")
-  (parameters
-    '("char*" "iid")
-    '("GType" "type")
-    '("char*" "name")
-    '("char*" "version")
-    '("MatePanelAppletFactoryCallback" "callback")
-    '("gpointer" "data")    
-  )
-)
-
-
--- python-mate-desktop-1.4.0/mateapplet/applet.override.orig	2012-07-11 19:05:07.000000000 +0200
+++ python-mate-desktop-1.4.0/mateapplet/applet.override	2014-01-13 19:54:22.651764255 +0100
@@ -26,218 +26,6 @@ import gtk.Widget as PyGtkWidget_Type
 ignore-glob
   *_get_type
 %%
-override mate_panel_applet_factory_main_closure kwargs
-static PyObject*
-_wrap_mate_panel_applet_factory_main_closure (PyGObject * self,
-			                 PyObject *  args,
-					 PyObject * kwargs)
-{
-    static char *kwlist[] = { "iid", "applet_type", "func", "extra_data", NULL };
-    gchar *iid;
-    PyObject *pytype;
-    PyObject *callback;
-    PyObject *params = NULL;
-    GType type;
-    int retval;
-    
-    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
-				     "sOO|O:MatePanelAppletFactory.__init__",
-				     kwlist, &iid, &pytype, &callback, &params)) {
-        return NULL;
-    }
-
-    if (!PyCallable_Check (callback)) {
-        PyErr_SetString (PyExc_TypeError, "second arg not callable");
-	return NULL;
-    }
-    
-    type = pyg_type_from_object (pytype);
-    
-    pyg_begin_allow_threads;
-    retval = mate_panel_applet_factory_main_closure (iid,
-    	     				       	type,
-                                                pyg_closure_new (callback, params, NULL));
-    pyg_end_allow_threads;
-    return PyInt_FromLong (retval);
-}
-%%
-override panel__applet_matecomponent_factory kwargs
-static PyObject *
-_wrap_panel__applet_matecomponent_factory (PyGObject * self,
- 			            PyObject *  args,
-				    PyObject * kwargs)
-{
-	static char *kwlist[] = { "iid", "type", "name", "version", "func", "extra_data", NULL };
-	gchar *iid;
-	PyObject *pytype;
-	gchar *name;
-	gchar *version;
-	PyObject *callback;
-	PyObject *params = NULL;
-	GType type;
-	PyObject *av;
-	int argc;
-	char **argv;
-	int i;
-	
-	if (!PyArg_ParseTupleAndKeywords(args, kwargs,
-					 "sOssO|O:mate.applet.matecomponent_factory",
-					 kwlist, &iid, &pytype, &name, &version, &callback, &params)) {
-		return NULL;
-	}
-	
-	if (!PyCallable_Check (callback)) {
-		PyErr_SetString (PyExc_TypeError, "second arg not callable");
-		return NULL;
-	}
-	
-	type = pyg_type_from_object (pytype);
-	
-	/* get argc and argv */
-	av = PySys_GetObject ("argv");
-	argc = PyList_Size (av);
-	argv = g_new (char *, argc);
-	for (i = 0; i < argc; i++) {
-		argv[i] = g_strdup (PyString_AsString (PyList_GetItem (av, i)));
-	}
-	
-	mate_program_init (name, version,     
-			    LIBMATEUI_MODULE,             
-			    argc, argv,                                         
-			    MATE_PARAM_NONE,
-                            MATE_CLIENT_PARAM_SM_CONNECT, FALSE,
-			    NULL);            
-
-        pyg_begin_allow_threads;
-        mate_panel_applet_factory_main_closure (iid,
-	                                   type,
-					   pyg_closure_new (callback, params, NULL));
-        pyg_end_allow_threads;
-	
-	/* TODO: Check if it's really neccessary to set argc and argv here */
-	PySys_SetArgv (argc, argv);
-	if (argv != NULL) {
-		for (i = 0; i < argc; i++)
-			g_free (argv[i]);
-		g_free (argv);
-	}
-	
-	Py_INCREF (Py_None);
-	return Py_None;
-}
-%%
-override mate_panel_applet_setup_menu kwargs
-static PyObject *
-_wrap_mate_panel_applet_setup_menu (PyGObject * self,
-			       PyObject *  args,
-			       PyObject *  kwargs)
-{
-    static char *kwlist[] = { "xml", "list", "extra_data", NULL };
-    gchar *             xml;
-    PyObject *          list;
-    PyObject *          params = NULL;
-    MateComponentUIComponent * popup_component;
-    int                 len, i;
-    PyObject *          item;
-    char *              cname;
-    PyObject *          callback;
-    
-    if (!PyArg_ParseTupleAndKeywords (args, kwargs,
-				      "sO|O:MatePanelApplet.setup_menu", 
-				      kwlist, &xml, &list, &params)) {
-	return NULL;
-    }
-
-    if (!PySequence_Check (list)) {
-	PyErr_SetString (PyExc_TypeError, "entries must be a sequence");
-	return NULL;
-    }
-    
-    /* Copied from mate-panel-applet.c */
-    popup_component = mate_panel_applet_get_popup_component (MATE_PANEL_APPLET (self->obj));
-	    
-    matecomponent_ui_component_set (popup_component, "/", "<popups/>", NULL);
- 
-    matecomponent_ui_component_set_translate (popup_component, "/popups", xml, NULL);
-    /* end copy */
-    
-    len = PySequence_Size (list);
-    for (i = 0; i < len; i++) {
-	item = PySequence_GetItem (list, i);
-	Py_DECREF (item);
-	
-	if (!PyArg_ParseTuple (item, "sO", &cname, &callback)) {
-	    return NULL;
-	}
-
-	matecomponent_ui_component_add_verb_full (popup_component, cname,
-					   pyg_closure_new (callback, params, NULL));
-    }
-
-    Py_INCREF(Py_None);
-    return Py_None;
-}
-%%
-override mate_panel_applet_setup_menu_from_file kwargs
-static PyObject *
-_wrap_mate_panel_applet_setup_menu_from_file (PyGObject * self,
-					 PyObject *  args,
-					 PyObject *  kwargs)
-{
-    static char *kwlist[] = { "opt_datadir", "file", "opt_app_name", "list", "extra_data", NULL };
-    gchar *             opt_datadir;
-    gchar *             file;
-    gchar *             opt_app_name;
-    PyObject *          list;
-    PyObject *          params = NULL;
-    MateComponentUIComponent * popup_component;
-    gchar *             app_name = NULL;
-    int                 len, i;
-    PyObject *          item;
-    char *              cname;
-    PyObject *          callback;
-    
-    if (!PyArg_ParseTupleAndKeywords (args, kwargs,
-				      "zszO|O:MatePanelApplet.setup_menu_from_file", 
-				      kwlist, &opt_datadir, &file, &opt_app_name, &list, &params)) {
-	return NULL;
-    }
-
-    if (!PySequence_Check (list)) {
-	PyErr_SetString (PyExc_TypeError, "entries must be a sequence");
-	return NULL;
-    }
-    
-    /* Copied from mate-panel-applet.c */
-    if (!opt_app_name)
-	opt_app_name = app_name = g_strdup_printf ("%d", getpid ());
-
-    popup_component = mate_panel_applet_get_popup_component (MATE_PANEL_APPLET (self->obj));
-
-    matecomponent_ui_util_set_ui (popup_component, opt_datadir, file, opt_app_name, NULL);
-    /* end copy */
-    
-    len = PySequence_Size (list);
-    for (i = 0; i < len; i++) {
-	item = PySequence_GetItem (list, i);
-	Py_DECREF (item);
-	
-	if (!PyArg_ParseTuple (item, "sO", &cname, &callback)) {
-	    return NULL;
-	}
-
-	matecomponent_ui_component_add_verb_full (popup_component, cname,
-					   pyg_closure_new (callback, params, NULL));
-    }
-    
-    if (app_name) {
-	g_free (app_name);
-    }
-    
-    Py_INCREF(Py_None);
-    return Py_None;
-}
-%%
 override mate_panel_applet_new noargs
 static int
 _wrap_mate_panel_applet_new(PyGObject *self, PyObject *args, PyObject *kwargs)
